/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "sigs.k8s.io/lws/api/leaderworkerset/v1"
)

// LeaderWorkerSetLister helps list LeaderWorkerSets.
// All objects returned here must be treated as read-only.
type LeaderWorkerSetLister interface {
	// List lists all LeaderWorkerSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.LeaderWorkerSet, err error)
	// LeaderWorkerSets returns an object that can list and get LeaderWorkerSets.
	LeaderWorkerSets(namespace string) LeaderWorkerSetNamespaceLister
	LeaderWorkerSetListerExpansion
}

// leaderWorkerSetLister implements the LeaderWorkerSetLister interface.
type leaderWorkerSetLister struct {
	indexer cache.Indexer
}

// NewLeaderWorkerSetLister returns a new LeaderWorkerSetLister.
func NewLeaderWorkerSetLister(indexer cache.Indexer) LeaderWorkerSetLister {
	return &leaderWorkerSetLister{indexer: indexer}
}

// List lists all LeaderWorkerSets in the indexer.
func (s *leaderWorkerSetLister) List(selector labels.Selector) (ret []*v1.LeaderWorkerSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LeaderWorkerSet))
	})
	return ret, err
}

// LeaderWorkerSets returns an object that can list and get LeaderWorkerSets.
func (s *leaderWorkerSetLister) LeaderWorkerSets(namespace string) LeaderWorkerSetNamespaceLister {
	return leaderWorkerSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LeaderWorkerSetNamespaceLister helps list and get LeaderWorkerSets.
// All objects returned here must be treated as read-only.
type LeaderWorkerSetNamespaceLister interface {
	// List lists all LeaderWorkerSets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.LeaderWorkerSet, err error)
	// Get retrieves the LeaderWorkerSet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.LeaderWorkerSet, error)
	LeaderWorkerSetNamespaceListerExpansion
}

// leaderWorkerSetNamespaceLister implements the LeaderWorkerSetNamespaceLister
// interface.
type leaderWorkerSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LeaderWorkerSets in the indexer for a given namespace.
func (s leaderWorkerSetNamespaceLister) List(selector labels.Selector) (ret []*v1.LeaderWorkerSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.LeaderWorkerSet))
	})
	return ret, err
}

// Get retrieves the LeaderWorkerSet from the indexer for a given namespace and name.
func (s leaderWorkerSetNamespaceLister) Get(name string) (*v1.LeaderWorkerSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("leaderworkerset"), name)
	}
	return obj.(*v1.LeaderWorkerSet), nil
}
